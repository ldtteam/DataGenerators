import org.w3c.dom.Element
import org.w3c.dom.Node
import org.w3c.dom.NodeList

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = 'https://files.minecraftforge.net/maven' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
    }
}

repositories {
    jcenter()
    mavenCentral()
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'com.jfrog.artifactory'

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        compileClasspath += sourceSets.main.compileClasspath
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.14.4-28.0.45'
    
    compileOnly "com.intellij:annotations:+@jar"
    compile 'com.intellij:annotations:+@jar'
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

version = System.getenv().containsKey("Version") ? System.getenv("Version") : "borked-" + System.currentTimeMillis()
group = 'com.ldtteam'
archivesBaseName = 'datagenerators'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20190726-1.14.3'

    runs {
        data {
            workingDirectory project.file('runData')

            property 'forge.logging.console.level', 'info'

            args '--mod', 'datagenerators', '--all', '--output', file('src/main/generated/resources'), '--input', file('src/main/resources')

            mods {
                structurize {
                    source sourceSets.main
                }
            }
        }
    }
}

javadoc {
    source += sourceSets.main.allJava
}

idea {
    module {
        inheritOutputDirs = true
    }
}

jar {
    from sourceSets.main.output

    manifest {
        attributes([
                'Maven-Artifact'          : "${project.group}:${project.archivesBaseName}:${project.version}",
                "Specification-Title"     : "datagenerators",
                "Specification-Vendor"    : "ldtteam",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "ldtteam",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

//Create a sources jar.
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

//Create a javadoc jar.
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

//Define what to publish and how.
publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId "datagenerators"
            artifact javadocJar
            artifact sourcesJar

            from components.java

            pom {
                url = 'https://github.com/ldtteam/DataGenerators'
                licenses {
                    license {
                        name = 'GNU GENERAL PUBLIC LICENSE Version 3'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'AshersLab'
                        name = 'Asher'
                        email = 'asherslab@chatchain.co'
                    }
                }
                contributors {
                    contributor {
                        id = 'ldtteam'
                        name = 'Let\'s Develop Together - Team'
                        email = 'info@ldtteam.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/ldtteam/datagenerators.git'
                    developerConnection = 'scm:git:ssh://github.com/ldtteam/datagenerators.git'
                    url = 'https://github.com/ldtteam/DataGenerators'
                }
            }

            //Replace all deobf dependencies with normal jar references.
            pom.withXml { xmlProvider ->
                final Element document = xmlProvider.asElement()
                final NodeList groupIdNodes = document.getElementsByTagName("groupId")
                groupIdNodes.each { groupIdNodeObject ->
                    final Node groupIdNode = (Node) groupIdNodeObject
                    final String groupId = groupIdNode.getFirstChild().getTextContent().trim()
                    groupIdNode.setTextContent(groupId.replace("deobf.", ""))
                }
            }
        }
    }
}

//Notify artifactory of what to publish.
artifactory {
    publish {
        defaults {
            publications('maven')
            publishBuildInfo = true   //Publish build-info to Artifactory (true by default)
            publishArtifacts = true   //Publish artifacts to Artifactory (true by default)
            publishPom = true   //Publish generated POM files to Artifactory (true by default).
        }
    }
}

task setupDecompWorkspace {
    afterEvaluate {
        println "Setup"
    }
}

task setupCIWorkspace {
    afterEvaluate {
        println "Setup"
    }
}

task curseforge {
    afterEvaluate {
        println "No uploading to curseforge required for this project."
    }
}

task createChangelog {
    afterEvaluate {
        println "No changelog creation needed. since we are not uploading to curseforge."
    }
}
